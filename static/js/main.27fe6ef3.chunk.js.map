{"version":3,"sources":["atoms.tsx","Components/DragabbleCard.tsx","Components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["localData","localStorage","getItem","todoState","atom","key","default","JSON","parse","Doing","Done","Card","styled","div","props","isDragging","theme","accentColor2","accentColor","DragabbleCard","todoId","todoText","idx","draggableId","toString","index","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","memo","Wrapper","bgAccentColor2","Title","h2","Form","form","bgAccentColor","textColor","Area","isDraggingOver","draggingFromThisWith","Board","todos","boardId","setTodos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","todo","newTodo","id","Date","now","text","allBoards","setItem","stringify","required","type","placeholder","droppableId","Boolean","droppableProps","map","Boards","App","useRecoilState","onDragEnd","info","console","log","destination","source","boardCopy","target","splice","sourceBoard","destinationBoard","Object","keys","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","bgColor","bgOpacityColor","document","getElementById"],"mappings":"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","file":"static/js/main.27fe6ef3.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nconst localData = localStorage.getItem(\"todos\");\n\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\ninterface ITodoState {\n  [key: string]: ITodo[];\n}\n\nexport const todoState = atom<ITodoState>({\n  key: \"todo\",\n  default: localData ? JSON.parse(localData) : {\n    \"To Do\": [],\n    Doing: [],\n    Done: [],\n  },\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div<{ isDragging: boolean }>`\n  background-color: ${(props) =>\n    props.isDragging ? props.theme.accentColor2 : props.theme.accentColor};\n  padding: 0.3rem;\n  margin: 0.3rem 1rem;\n  border-radius: 0.2rem;\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0.5rem 0.5rem 1rem rgba(0,0,0,0.5)\" : \"none\"};\n`;\n\ninterface IDragabbleCardProps {\n  todoId: number;\n  todoText: string;\n  idx: number;\n}\n\nfunction DragabbleCard({ todoId, todoText, idx }: IDragabbleCardProps) {\n  return (\n    <Draggable draggableId={todoId.toString()} index={idx}>\n      {(provided, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          {todoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(DragabbleCard);\n","import { Droppable } from \"react-beautiful-dnd\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { ITodo, todoState } from \"../atoms\";\nimport DragabbleCard from \"./DragabbleCard\";\n\nconst Wrapper = styled.div`\n  background-color: ${(props) => props.theme.bgAccentColor2};\n  padding: 0.5rem;\n  border-radius: 0.2rem;\n  min-height: 25vh;\n  display: flex;\n  flex-direction: column;\n  @media screen and (min-width: 769px) {\n    min-height: 70vh;\n  }\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  font-size: 2rem;\n  white-space: nowrap;\n  color: ${(props) => props.theme.accentColor2};\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  padding: 0 0.2rem;\n  display: flex;\n  justify-content: center;\n  input {\n    font-size: 1rem;\n    border: 0;\n    background-color: ${(props) => props.theme.bgAccentColor};\n    color: ${(props) => props.theme.accentColor};\n    width: 80%;\n    padding: 0.2rem;\n    border-radius: 0.2rem;\n    text-align: center;\n    margin: 0 auto;\n    &::placeholder {\n      color: ${(props) => props.theme.textColor};\n    }\n  }\n`;\n\ninterface IAreaProps {\n  isDraggingOver: boolean;\n  draggingFromThisWith: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n  border-radius: 0.2rem;\n  padding: 0 0.2rem;\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? props.theme.accentColor2\n      : props.draggingFromThisWith\n      ? props.theme.bgAccentColor\n      : props.theme.bgAccentColor2};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n`;\n\ninterface IBoardProps {\n  todos: ITodo[];\n  boardId: string;\n}\n\ninterface IForm {\n  todo: string;\n}\n\nfunction Board({ todos, boardId }: IBoardProps) {\n  const setTodos = useSetRecoilState(todoState);\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onValid = ({ todo }: IForm) => {\n    const newTodo: ITodo = {\n      id: Date.now(),\n      text: todo,\n    };\n    setTodos((allBoards) => {\n      // save to local storage\n      localStorage.setItem(\n        \"todos\",\n        JSON.stringify({\n          ...allBoards,\n          [boardId]: [newTodo, ...allBoards[boardId]],\n        })\n      );\n      return {\n        ...allBoards,\n        [boardId]: [newTodo, ...allBoards[boardId]],\n      };\n    });\n    setValue(\"todo\", \"\");\n  };\n  return (\n    <Wrapper>\n      <Title>{boardId}</Title>\n      <br />\n      <Form onSubmit={handleSubmit(onValid)}>\n        <input\n          {...register(\"todo\", { required: true })}\n          type=\"text\"\n          placeholder={`Add on ${boardId}...`}\n        />\n      </Form>\n      <br />\n      <Droppable droppableId={boardId}>\n        {(provided, snapshot) => (\n          <Area\n            isDraggingOver={snapshot.isDraggingOver}\n            draggingFromThisWith={Boolean(snapshot.draggingFromThisWith)}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {todos.map((todo, idx) => (\n              <DragabbleCard\n                key={todo.id}\n                idx={idx}\n                todoId={todo.id}\n                todoText={todo.text}\n              />\n            ))}\n            {provided.placeholder}\n          </Area>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n}\n\nexport default Board;\n","import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { todoState } from \"./atoms\";\nimport Board from \"./Components/Board\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  max-width: 80vw;\n  width: 100%;\n  height: 100vh;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Boards = styled.div`\n  display: grid;\n  width: 100%;\n  gap: 0.5rem;\n  grid-template-rows: repeat(1, 1fr);\n  @media screen and (min-width: 769px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\n\nfunction App() {\n  const [todos, setTodos] = useRecoilState(todoState);\n  const onDragEnd = (info: DropResult) => {\n    console.log(info);\n    const { destination, source } = info;\n    if (!destination) return;\n\n    // same board movement.\n    if (destination?.droppableId === source.droppableId) {\n      setTodos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        // Delete item on source\n        const target = boardCopy.splice(source.index, 1);\n        // Put back the item\n        boardCopy.splice(destination?.index, 0, ...target);\n\n        // save to local storage\n        localStorage.setItem(\n          \"todos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: boardCopy,\n          })\n        );\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n\n    // cross board movement\n    if (destination.droppableId !== source.droppableId) {\n      setTodos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const destinationBoard = [...allBoards[destination.droppableId]];\n        const target = sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination?.index, 0, ...target);\n\n        // save to local storage\n        localStorage.setItem(\n          \"todos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: sourceBoard,\n            [destination.droppableId]: destinationBoard,\n          })\n        );\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      });\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Wrapper>\n        <Boards>\n          {Object.keys(todos).map((boardId) => (\n            <Board key={boardId} boardId={boardId} todos={todos[boardId]} />\n          ))}\n        </Boards>\n      </Wrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\n// reset styles\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nhtml {\n  font-size: max(2vmax, 16px);\n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgAccentColor};\n  color: ${(props) => props.theme.textColor};\n}\na {\n  text-decoration: none;\n  color: inherit\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#222222\",\n  bgOpacityColor: \"#111111\",\n  textColor: \" #F1F2F6\",\n  accentColor: \"#00C896\",\n  accentColor2: \"#FF00FF\",\n  bgAccentColor: \"#9DE5D3\",\n  bgAccentColor2: \"#F5B8F5\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"#F1F2F6\",\n  bgOpacityColor: \"#DFDEE1\",\n  textColor: \" #222222\",\n  accentColor: \"#FF00FF\",\n  accentColor2: \"#00C896\",\n  bgAccentColor: \"#F5B8F5\",\n  bgAccentColor2: \"#9DE5D3\",\n};\n"],"sourceRoot":""}